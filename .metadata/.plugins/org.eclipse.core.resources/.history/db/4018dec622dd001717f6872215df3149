package tophosts;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;

public class Driver {

	public static void main(String[] args) throws Exception {
		
		if (args.length != 3) {
			System.err.println("Usage: TopHostWithMostListings <input path> <internediate> <output path>");
			System.exit(-1);
		}

		Path inputPath = new Path(args[0]);
		Path output_intermediate = new Path(args[1]);
		Path output_dir = new Path(args[2]);

		// Create configuration
				Configuration conf = new Configuration(true);

				// Create job
				Job job = new Job(conf, "MovieRating");
				job.setJarByClass(TopRatedMoviesMapper1.class);

				// Setup MapReduce
				job.setMapperClass(TopRatedMoviesMapper1.class);
				job.setReducerClass(TopRatedMoviesReducer1.class);

				// Specify key / value
				job.setMapOutputKeyClass(LongWritable.class);
				job.setMapOutputValueClass(FloatWritable.class);
				job.setOutputKeyClass(LongWritable.class);
				job.setOutputValueClass(FloatWritable.class);

				// Input
				FileInputFormat.addInputPath(job, inputPath);
				job.setInputFormatClass(TextInputFormat.class);

				// Output
				FileOutputFormat.setOutputPath(job, output_intermediate);
				
				FileSystem hdfs = FileSystem.get(conf);
				if (hdfs.exists(output_intermediate))
					hdfs.delete(output_intermediate, true);
				
				if (hdfs.exists(output_dir))
					hdfs.delete(output_dir, true);

				

				boolean complete = job.waitForCompletion(true);
		
	}

}
